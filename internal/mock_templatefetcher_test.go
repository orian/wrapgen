// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/orian/wrapgen/internal (interfaces: TemplateFetcher)

// Package wrapgen is a generated GoMock package.
package wrapgen

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTemplateFetcher is a mock of TemplateFetcher interface
type MockTemplateFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateFetcherMockRecorder
}

// MockTemplateFetcherMockRecorder is the mock recorder for MockTemplateFetcher
type MockTemplateFetcherMockRecorder struct {
	mock *MockTemplateFetcher
}

// NewMockTemplateFetcher creates a new mock instance
func NewMockTemplateFetcher(ctrl *gomock.Controller) *MockTemplateFetcher {
	mock := &MockTemplateFetcher{ctrl: ctrl}
	mock.recorder = &MockTemplateFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTemplateFetcher) EXPECT() *MockTemplateFetcherMockRecorder {
	return m.recorder
}

// FetchTemplate mocks base method
func (m *MockTemplateFetcher) FetchTemplate(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTemplate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTemplate indicates an expected call of FetchTemplate
func (mr *MockTemplateFetcherMockRecorder) FetchTemplate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTemplate", reflect.TypeOf((*MockTemplateFetcher)(nil).FetchTemplate), arg0, arg1)
}
