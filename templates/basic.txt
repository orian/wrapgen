package #! .Name !#

// Code generated by wrapgen DO NOT EDIT

import (
	#! range .Imports !##! .Package !# "#! .Path !#"
	#! end !#
)

#! range .Interfaces !#
type Wraps#! .Name !# struct {
	wrapped #! .SrcType !#
}

#! $ifaceRef := . !#
#! range .Methods !#
#! $methodRef := . !#
func (w *Wraps#! $ifaceRef.Name !#) #! .Name !#(#! range $x, $e := .In !##! $e.Name !# #! $e.Type !##! if ne $x (add (len $methodRef.In) -1)!#, #! end !##! end !#) (#! $methodRef := . !##! range $x, $e := .Out !##! $e.Type !##! if ne $x (add (len $methodRef.Out) -1)!#, #! end !##! end !#) {
	// TODO: Add code before the call
	#! if ne (len .Out) 0 !#var #! range $x, $e := .Out !##! $e.Name !##! if ne $x (add (len $methodRef.Out) -1) !#,#! end !##! end !# = #! end !#w.wrapped.#! .Name !#(#! range $x, $e := .In !##! $e.Name !##! if contains "..." $e.Type.String !#...#! end !##! if ne $x (add (len $methodRef.In ) -1) !#,#! end !##! end !#)
	// TODO: Add code after the call
	return #! if ne (len .Out) 0 !##! range $x, $e := .Out !##! $e.Name !##! if ne $x (add (len $methodRef.Out) -1) !#,#! end !##! end !##! end !#
}
#! end !#
#! end !#
